// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LimiterClient is the client API for Limiter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LimiterClient interface {
	Validate(ctx context.Context, in *LoginAttempt, opts ...grpc.CallOption) (*AttemptResult, error)
	DropIPStats(ctx context.Context, in *Stats, opts ...grpc.CallOption) (*OperationResult, error)
	DropLoginStats(ctx context.Context, in *Stats, opts ...grpc.CallOption) (*OperationResult, error)
	DropPasswordStats(ctx context.Context, in *Stats, opts ...grpc.CallOption) (*OperationResult, error)
	AddBlacklist(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*OperationResult, error)
	RemoveBlacklist(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*OperationResult, error)
	AddWhitelist(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*OperationResult, error)
	RemoveWhitelist(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*OperationResult, error)
}

type limiterClient struct {
	cc grpc.ClientConnInterface
}

func NewLimiterClient(cc grpc.ClientConnInterface) LimiterClient {
	return &limiterClient{cc}
}

func (c *limiterClient) Validate(ctx context.Context, in *LoginAttempt, opts ...grpc.CallOption) (*AttemptResult, error) {
	out := new(AttemptResult)
	err := c.cc.Invoke(ctx, "/ratelimiter.Limiter/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limiterClient) DropIPStats(ctx context.Context, in *Stats, opts ...grpc.CallOption) (*OperationResult, error) {
	out := new(OperationResult)
	err := c.cc.Invoke(ctx, "/ratelimiter.Limiter/DropIPStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limiterClient) DropLoginStats(ctx context.Context, in *Stats, opts ...grpc.CallOption) (*OperationResult, error) {
	out := new(OperationResult)
	err := c.cc.Invoke(ctx, "/ratelimiter.Limiter/DropLoginStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limiterClient) DropPasswordStats(ctx context.Context, in *Stats, opts ...grpc.CallOption) (*OperationResult, error) {
	out := new(OperationResult)
	err := c.cc.Invoke(ctx, "/ratelimiter.Limiter/DropPasswordStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limiterClient) AddBlacklist(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*OperationResult, error) {
	out := new(OperationResult)
	err := c.cc.Invoke(ctx, "/ratelimiter.Limiter/AddBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limiterClient) RemoveBlacklist(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*OperationResult, error) {
	out := new(OperationResult)
	err := c.cc.Invoke(ctx, "/ratelimiter.Limiter/RemoveBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limiterClient) AddWhitelist(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*OperationResult, error) {
	out := new(OperationResult)
	err := c.cc.Invoke(ctx, "/ratelimiter.Limiter/AddWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limiterClient) RemoveWhitelist(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*OperationResult, error) {
	out := new(OperationResult)
	err := c.cc.Invoke(ctx, "/ratelimiter.Limiter/RemoveWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LimiterServer is the server API for Limiter service.
// All implementations must embed UnimplementedLimiterServer
// for forward compatibility
type LimiterServer interface {
	Validate(context.Context, *LoginAttempt) (*AttemptResult, error)
	DropIPStats(context.Context, *Stats) (*OperationResult, error)
	DropLoginStats(context.Context, *Stats) (*OperationResult, error)
	DropPasswordStats(context.Context, *Stats) (*OperationResult, error)
	AddBlacklist(context.Context, *Subnet) (*OperationResult, error)
	RemoveBlacklist(context.Context, *Subnet) (*OperationResult, error)
	AddWhitelist(context.Context, *Subnet) (*OperationResult, error)
	RemoveWhitelist(context.Context, *Subnet) (*OperationResult, error)
	mustEmbedUnimplementedLimiterServer()
}

// UnimplementedLimiterServer must be embedded to have forward compatible implementations.
type UnimplementedLimiterServer struct {
}

func (UnimplementedLimiterServer) Validate(context.Context, *LoginAttempt) (*AttemptResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedLimiterServer) DropIPStats(context.Context, *Stats) (*OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropIPStats not implemented")
}
func (UnimplementedLimiterServer) DropLoginStats(context.Context, *Stats) (*OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropLoginStats not implemented")
}
func (UnimplementedLimiterServer) DropPasswordStats(context.Context, *Stats) (*OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropPasswordStats not implemented")
}
func (UnimplementedLimiterServer) AddBlacklist(context.Context, *Subnet) (*OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlacklist not implemented")
}
func (UnimplementedLimiterServer) RemoveBlacklist(context.Context, *Subnet) (*OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBlacklist not implemented")
}
func (UnimplementedLimiterServer) AddWhitelist(context.Context, *Subnet) (*OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWhitelist not implemented")
}
func (UnimplementedLimiterServer) RemoveWhitelist(context.Context, *Subnet) (*OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWhitelist not implemented")
}
func (UnimplementedLimiterServer) mustEmbedUnimplementedLimiterServer() {}

// UnsafeLimiterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LimiterServer will
// result in compilation errors.
type UnsafeLimiterServer interface {
	mustEmbedUnimplementedLimiterServer()
}

func RegisterLimiterServer(s grpc.ServiceRegistrar, srv LimiterServer) {
	s.RegisterService(&Limiter_ServiceDesc, srv)
}

func _Limiter_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginAttempt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimiterServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratelimiter.Limiter/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimiterServer).Validate(ctx, req.(*LoginAttempt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Limiter_DropIPStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimiterServer).DropIPStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratelimiter.Limiter/DropIPStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimiterServer).DropIPStats(ctx, req.(*Stats))
	}
	return interceptor(ctx, in, info, handler)
}

func _Limiter_DropLoginStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimiterServer).DropLoginStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratelimiter.Limiter/DropLoginStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimiterServer).DropLoginStats(ctx, req.(*Stats))
	}
	return interceptor(ctx, in, info, handler)
}

func _Limiter_DropPasswordStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimiterServer).DropPasswordStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratelimiter.Limiter/DropPasswordStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimiterServer).DropPasswordStats(ctx, req.(*Stats))
	}
	return interceptor(ctx, in, info, handler)
}

func _Limiter_AddBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subnet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimiterServer).AddBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratelimiter.Limiter/AddBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimiterServer).AddBlacklist(ctx, req.(*Subnet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Limiter_RemoveBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subnet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimiterServer).RemoveBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratelimiter.Limiter/RemoveBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimiterServer).RemoveBlacklist(ctx, req.(*Subnet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Limiter_AddWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subnet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimiterServer).AddWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratelimiter.Limiter/AddWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimiterServer).AddWhitelist(ctx, req.(*Subnet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Limiter_RemoveWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subnet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimiterServer).RemoveWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratelimiter.Limiter/RemoveWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimiterServer).RemoveWhitelist(ctx, req.(*Subnet))
	}
	return interceptor(ctx, in, info, handler)
}

// Limiter_ServiceDesc is the grpc.ServiceDesc for Limiter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Limiter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ratelimiter.Limiter",
	HandlerType: (*LimiterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _Limiter_Validate_Handler,
		},
		{
			MethodName: "DropIPStats",
			Handler:    _Limiter_DropIPStats_Handler,
		},
		{
			MethodName: "DropLoginStats",
			Handler:    _Limiter_DropLoginStats_Handler,
		},
		{
			MethodName: "DropPasswordStats",
			Handler:    _Limiter_DropPasswordStats_Handler,
		},
		{
			MethodName: "AddBlacklist",
			Handler:    _Limiter_AddBlacklist_Handler,
		},
		{
			MethodName: "RemoveBlacklist",
			Handler:    _Limiter_RemoveBlacklist_Handler,
		},
		{
			MethodName: "AddWhitelist",
			Handler:    _Limiter_AddWhitelist_Handler,
		},
		{
			MethodName: "RemoveWhitelist",
			Handler:    _Limiter_RemoveWhitelist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_api.proto",
}
